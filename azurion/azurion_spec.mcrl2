sort Button = struct start | stop | emergency;
sort Pedal = struct pedal1 | pedal2;
sort Arm = struct arm1 | arm2;
sort JoystickDirection = struct upJ | downJ | leftJ | rightJ;
sort TableDirection = struct upT | downT | forwardsT | backwardsT;
sort ArmDirection = struct upA | downA | forwardsA | backwardsA;
sort ArmRotation = struct clockwise | counterclockwise | transversalforwards | transversalbackwards;

map translatePedaltoArm: Pedal -> Arm;
	translateJoystickToTableMovement: JoystickDirection -> TableDirection;
	translateJoystickToArmMovement: JoystickDirection -> ArmDirection;
	translateJoystickToArmRotation: JoystickDirection -> ArmRotation;
eqn translatePedaltoArm(pedal1) = arm1;
	translatePedaltoArm(pedal2) = arm2;
	translateJoystickToTableMovement(upJ) = upT;
	translateJoystickToTableMovement(downJ) = downT;
	translateJoystickToTableMovement(leftJ) = backwardsT;
	translateJoystickToTableMovement(rightJ) = forwardsT;
	translateJoystickToArmMovement(upJ) = upA;
	translateJoystickToArmMovement(downJ) = downA;
	translateJoystickToArmMovement(leftJ) = backwardsA;
	translateJoystickToArmMovement(rightJ) = forwardsA;
	translateJoystickToArmRotation(upJ) = clockwise;
	translateJoystickToArmRotation(downJ) = counterclockwise;
	translateJoystickToArmRotation(leftJ) = transversalbackwards;
	translateJoystickToArmRotation(rightJ) = transversalforwards;

map boundaryCheckTablePosition: TableDirection # Int -> Bool;
	boundaryCheckArmPosition: ArmDirection -> Bool;
	boundaryCheckArmRotation: ArmRotation -> Bool;
var tablePositionY: Int;
eqn boundaryCheckTablePosition(upT, tablePositionY) = (tablePositionY < 10);

act
	% external actions
	pressButton: Button;
	releaseButton: Button;
    pressPedal: Pedal;
    releasePedal: Pedal;
    weightSensorOn;
    weightSensorOff;
    moveTableJoystick: JoystickDirection;
	releaseTableMoveJoystick;
    moveTable: TableDirection;
	stopMoveTable;
    switchOnXray: Arm;
    switchOffXray: Arm;
    moveArmJoystick: Arm # JoystickDirection;
	releaseArmMoveJoystick: Arm;
    moveArm: Arm # ArmDirection;
	stopMoveArm: Arm;
	rotateArmJoystick: Arm # JoystickDirection;
	releaseArmRotateJoystick: Arm;
    rotateArm: Arm # ArmRotation; 
	stopRotateArm: Arm;
	atBoundaryPositionTable;
	atBoundaryPositionArm: Arm;
	atBoundaryRotationArm: Arm;
	displayXRayImage;
 
	% internal actions
	% IO <-> XRay
    sendSwitchOnXray: Arm;
    receiveSwitchOnXray: Arm;
	switchOnXrayInternal: Arm;
    sendSwitchOffXray: Arm;
    receiveSwitchOffXray: Arm;
	switchOffXrayInternal: Arm;
	sendXRayImage: Arm;
	receiveXRayImage: Arm;
	transmitXRayImageInternal: Arm;
	% IO <-> Movement
    sendMoveTable: TableDirection;
    receiveMoveTable: TableDirection;
	moveTableInternal: TableDirection;
    sendMoveArm: Arm # ArmDirection;
    receiveMoveArm: Arm # ArmDirection;
	moveArmInternal: Arm # ArmDirection;
    sendRotateArm: Arm # ArmRotation;
    receiveRotateArm: Arm # ArmRotation;
	rotateArmInternal: Arm # ArmRotation;
	sendStopTableMove;
	receiveStopTableMove;
	stopTableMoveInternal;
	sendStopArmMove: Arm;
	receiveStopArmMove: Arm;
	stopArmMoveInternal: Arm;
	sendStopArmRotate: Arm;
	receiveStopArmRotate: Arm;
	stopArmRotateInternal: Arm;
        
proc
	IOControl(operationOngoing: Bool, emergencyMode: Bool, patientOnTable: Bool, TableMoveStopped: Bool, Arm1MoveStopped: Bool, Arm2MoveStopped: Bool, Arm1RotateStopped: Bool, Arm2RotateStopped: Bool, XRayOnArm1: Bool, XRayOnArm2: Bool) = 
		 (!operationOngoing && patientOnTable && !emergencyMode) 
		 	-> pressButton(start) 
				. IOControl(operationOngoing = true) <> delta
		+ (operationOngoing) 
			-> pressButton(stop) 
				. IOControl(operationOngoing = false) <> delta
		+ (!operationOngoing && (XRayOnArm1 || XRayOnArm2)) 
			-> sendSwitchOffXray(arm1) . sendSwitchOffXray(arm2) 
				. IOControl(XRayOnArm1 = false, XRayOnArm2 = false) <> delta
		+ (!emergencyMode) 
			-> pressButton(emergency) 
				. IOControl(operationOngoing = false, emergencyMode = true) <> delta
		+ (emergencyMode && (XRayOnArm1 || XRayOnArm2)) 
			-> sendSwitchOffXray(arm1) . sendSwitchOffXray(arm2) 
				. IOControl(XRayOnArm1 = false, XRayOnArm2 = false) <> delta
		+ (emergencyMode) 
			-> releaseButton(emergency) 
				. IOControl(emergencyMode = false) <> delta
		+ (!patientOnTable && (XRayOnArm1 || XRayOnArm2)) 
			-> weightSensorOn . sendSwitchOffXray(arm1) . sendSwitchOffXray(arm2) 
				. IOControl(patientOnTable = true, XRayOnArm1 = false, XRayOnArm2 = false) <> delta
		+ (patientOnTable)
			-> weightSensorOff 
				. IOControl(operationOngoing = false, patientOnTable = false) <> delta
		+ (!patientOnTable && (XRayOnArm1 || XRayOnArm2)) 
			-> sendSwitchOffXray(arm1) . sendSwitchOffXray(arm2) 
				. IOControl(XRayOnArm1 = false, XRayOnArm2 = false) <> delta
		+ sum pedal: Pedal . (!emergencyMode && operationOngoing && patientOnTable && if(translatePedaltoArm(pedal) == arm1, !XRayOnArm1, !XRayOnArm2)) 
			-> pressPedal(pedal) . sendSwitchOnXray(translatePedaltoArm(pedal)) 
				. IOControl(XRayOnArm1 = if(translatePedaltoArm(pedal) == arm1, true, XRayOnArm1), XRayOnArm2 = if(translatePedaltoArm(pedal) == arm2, true, XRayOnArm2)) <> delta
		+ sum pedal: Pedal . (!emergencyMode && operationOngoing && patientOnTable && if(translatePedaltoArm(pedal) == arm1, XRayOnArm1, XRayOnArm2))
			-> releasePedal(pedal) . sendSwitchOffXray(translatePedaltoArm(pedal)) 
				. IOControl(XRayOnArm1 = if(translatePedaltoArm(pedal) == arm1, false, XRayOnArm1), XRayOnArm2 = if(translatePedaltoArm(pedal) == arm2, false, XRayOnArm2)) <> delta
		+ sum direction: JoystickDirection . (!operationOngoing && !emergencyMode && TableMoveStopped)
			-> moveTableJoystick(direction) . sendMoveTable(translateJoystickToTableMovement(direction)) 
				. IOControl(TableMoveStopped = false) <> delta
		+ sum arm: Arm . sum direction: JoystickDirection . (operationOngoing && !emergencyMode && patientOnTable && if((arm == arm1), Arm1MoveStopped, Arm2MoveStopped)) 
			-> moveArmJoystick(arm, direction) . sendMoveArm(arm, translateJoystickToArmMovement(direction)) 
				. IOControl(Arm1MoveStopped = if((arm == arm1), false, Arm1MoveStopped), Arm2MoveStopped = if((arm == arm2), false, Arm2MoveStopped))  <> delta
		+ sum arm: Arm . sum direction: JoystickDirection. (operationOngoing && !emergencyMode && patientOnTable && if((arm == arm1), Arm1RotateStopped, Arm2RotateStopped)) 
			-> rotateArmJoystick(arm, direction) . sendRotateArm(arm, translateJoystickToArmRotation(direction)) 
				. IOControl(Arm1RotateStopped = if((arm == arm1), false, Arm1RotateStopped), Arm2RotateStopped = if((arm == arm2), false, Arm2RotateStopped)) <> delta
		+ sum arm: Arm . receiveXRayImage(arm) . displayXRayImage 
				. IOControl() % conditions here as well?
		+ (!operationOngoing && !emergencyMode && patientOnTable && !TableMoveStopped) 
			-> releaseTableMoveJoystick . sendStopTableMove 
				. IOControl(TableMoveStopped = true) <> delta
		+ sum arm: Arm . (operationOngoing && !emergencyMode && patientOnTable && if((arm == arm1), !Arm1MoveStopped, !Arm2MoveStopped))
			-> releaseArmMoveJoystick(arm) . sendStopArmMove(arm) 
				. IOControl(Arm1MoveStopped = if((arm == arm1), true, Arm1MoveStopped), Arm2MoveStopped = if((arm == arm2), true, Arm2MoveStopped)) <> delta
		+ sum arm: Arm . (operationOngoing && !emergencyMode && patientOnTable && if((arm == arm1), !Arm1RotateStopped, !Arm2RotateStopped))
			-> releaseArmRotateJoystick(arm) . sendStopArmRotate(arm) 
				. IOControl(Arm1RotateStopped = if((arm == arm1), true, Arm1RotateStopped), Arm2RotateStopped = if((arm == arm2), true, Arm2RotateStopped)) <> delta;

	Movement(TableMoveStopped: Bool, Arm1MoveStopped: Bool, Arm2MoveStopped: Bool, Arm1RotateStopped: Bool, Arm2RotateStopped: Bool) =
		  sum direction: TableDirection. (TableMoveStopped) -> 
		  	receiveMoveTable(direction) . moveTable(direction) 
				. Movement(TableMoveStopped = false) <> delta
		+ sum arm: Arm. (sum direction: ArmDirection. if((arm == arm1), Arm1MoveStopped, Arm2MoveStopped) 
			-> receiveMoveArm(arm, direction) . moveArm(arm, direction) 
				. Movement(Arm1MoveStopped = if((arm == arm1), false, Arm1MoveStopped), Arm2MoveStopped = if((arm == arm2), false , Arm2MoveStopped)) <> delta) 
		+ sum arm: Arm. (sum direction: ArmRotation.  if((arm == arm1), Arm1RotateStopped, Arm2RotateStopped) 
			-> receiveRotateArm(arm, direction) . rotateArm(arm, direction) 
				. Movement(Arm1RotateStopped = if((arm == arm1), false, Arm1RotateStopped), Arm2RotateStopped = if((arm == arm2), false, Arm2RotateStopped)) <> delta)
		+ (!TableMoveStopped) 
			-> receiveStopTableMove . stopMoveTable 
				. Movement(TableMoveStopped = true) <> delta
		+ sum arm: Arm. if((arm == arm1), !Arm1MoveStopped, !Arm2MoveStopped) 
			-> receiveStopArmMove(arm) . stopMoveArm(arm) 
				. Movement(Arm1MoveStopped = if((arm == arm1), true, Arm1MoveStopped), Arm2MoveStopped = if((arm == arm2), true , Arm2MoveStopped)) <> delta
		+ sum arm: Arm. if((arm == arm1), !Arm1RotateStopped, !Arm2RotateStopped) 
			-> receiveStopArmRotate(arm) . stopRotateArm(arm) 
				. Movement(Arm1RotateStopped = if((arm == arm1), true, Arm1RotateStopped), Arm2RotateStopped = if((arm == arm2),true, Arm2RotateStopped)) <> delta
		+ (!TableMoveStopped) 
			-> atBoundaryPositionTable . stopMoveTable 
				. Movement(TableMoveStopped = true) <> delta
		+ sum arm: Arm. if((arm == arm1), !Arm1MoveStopped, !Arm2MoveStopped) 
			-> atBoundaryPositionArm(arm) . stopMoveArm(arm) 
				. Movement(Arm1MoveStopped = if((arm == arm1), true, Arm1MoveStopped), Arm2MoveStopped = if((arm == arm2), true , Arm2MoveStopped)) <> delta
		+ sum arm: Arm. if((arm == arm1), !Arm1RotateStopped, !Arm2RotateStopped) 
			-> atBoundaryRotationArm(arm) . stopRotateArm(arm) 
				. Movement(Arm1RotateStopped = if((arm == arm1), true, Arm1RotateStopped), Arm2RotateStopped = if((arm == arm2),true, Arm2RotateStopped)) <> delta;

	XRayControl( XRayOnArm1: Bool, XRayOnArm2: Bool) =
		  (!XRayOnArm1) 
		  	-> receiveSwitchOnXray(arm1) . switchOnXray(arm1) 
				. XRayControl(true, XRayOnArm2) <> delta
		+ (!XRayOnArm2) 
			-> receiveSwitchOnXray(arm2) . switchOnXray(arm2) 
				. XRayControl(XRayOnArm1, true) <> delta
		+ (XRayOnArm1) 
			-> receiveSwitchOffXray(arm1) . switchOffXray(arm1) 
				. XRayControl(false, XRayOnArm2) <> delta
		+ (XRayOnArm2) 
			-> receiveSwitchOffXray(arm2) . switchOffXray(arm2) 
				. XRayControl(XRayOnArm1, false) <> delta
		+ (XRayOnArm1) 
			-> sendXRayImage(arm1) 
				. XRayControl() <> delta
		+ (XRayOnArm2) 
			-> sendXRayImage(arm2) 
				. XRayControl() <> delta;

init
	allow(
		{ 
			% internal actions
			switchOnXrayInternal,
			switchOffXrayInternal,
			moveTableInternal,
			moveArmInternal,
			rotateArmInternal,
			transmitXRayImageInternal,
			stopTableMoveInternal,
			stopArmMoveInternal,
			stopArmRotateInternal,
			% external actions
            pressButton, 
            releaseButton,
            pressPedal,
            releasePedal,
            weightSensorOn,
            weightSensorOff,
            moveTableJoystick,
			releaseTableMoveJoystick,
            moveTable,
			stopMoveTable,
            switchOnXray,
            switchOffXray,
            moveArmJoystick,
			releaseArmMoveJoystick,
            moveArm,
			stopMoveArm,
			rotateArmJoystick,
			releaseArmRotateJoystick,
            rotateArm,
			stopRotateArm,
			displayXRayImage,
			atBoundaryPositionTable,
			atBoundaryPositionArm,
			atBoundaryRotationArm
        },
		comm(
			{ 
               sendSwitchOnXray | receiveSwitchOnXray -> switchOnXrayInternal,
               sendSwitchOffXray | receiveSwitchOffXray -> switchOffXrayInternal,
               sendMoveTable | receiveMoveTable -> moveTableInternal,
               sendMoveArm | receiveMoveArm -> moveArmInternal,
               sendRotateArm | receiveRotateArm -> rotateArmInternal,
			   sendXRayImage | receiveXRayImage -> transmitXRayImageInternal,
			   sendStopTableMove | receiveStopTableMove -> stopTableMoveInternal,
			   sendStopArmMove | receiveStopArmMove -> stopArmMoveInternal,
			   sendStopArmRotate | receiveStopArmRotate -> stopArmRotateInternal
            },
		Movement(true, true, true, true, true) || IOControl(false, false, false, true, true, true, true, true, false, false) || XRayControl(false, false)
		)
	);